const request = require('request');
module.exports = {
	getRandomDog: () => {
		return new Promise((resolve, reject) => {
			request('https://random.dog/woof.json', (err, res, body) => {
				if(err && !res.statusCode === 200) {
					reject(err);
				} else {
					const parsed = JSON.parse(body);
					resolve(parsed.url);
				}
			})
		})
	}, 
	getRandomDogFact: (amount = 1) => {
		return new Promise((resolve, reject) => {
			if(isNaN(amount)) {
				reject('The amount must be a number.')
			} else {
		    	if(amount < 1) {
					reject('The amount can\'t be less than one.');
				}
				else if(amount > 500) {
					reject('The maximum facts you can get is 500.');
				} else {
					if(amount > 1) {
						request(`https://cat-fact.herokuapp.com/facts/random?animal_type=dog&amount=${amount}`, (err, res, body) => {
							if(err && !res.statusCode === 200) {
								reject(err);
							} else {
								const parsed = JSON.parse(body);
								const newArr = [];
								for(const i in parsed) {
									newArr.push(parsed[i].text);
								};
								resolve(newArr);
							}
						});
					} else {
						request(`https://cat-fact.herokuapp.com/facts/random?animal_type=dog&amount=${amount}`, (err, res, body) => {
							if(err && !res.statusCode === 200) {
								reject(err);
							} else {
								const parsed = JSON.parse(body);
								resolve(parsed.text);
							}
						});
					}
				}
			}
		})
	},
	getRandomCatFact: (amount = 1) => {
		return new Promise((resolve, reject) => {
			if(isNaN(amount)) {
				reject('The amount must be a number.')
			} else {
		    	if(amount < 1) {
					reject('The amount can\'t be less than one.');
				}
				else if(amount > 500) {
					reject('The maximum facts you can get is 500.');
				} else {
					if(amount > 1) {
						request(`https://cat-fact.herokuapp.com/facts/random?animal_type=cat&amount=${amount}`, (err, res, body) => {
							if(err && !res.statusCode === 200) {
								reject(err);
							} else {
								const parsed = JSON.parse(body);
								const newArr = [];
								for(const i in parsed) {
									newArr.push(parsed[i].text);
								};
								resolve(newArr);
							}
						});
					} else {
						request(`https://cat-fact.herokuapp.com/facts/random?animal_type=cat&amount=${amount}`, (err, res, body) => {
							if(err && !res.statusCode === 200) {
								reject(err);
							} else {
								const parsed = JSON.parse(body);
								resolve(parsed.text);
							}
						});
					}
				}
			}
		})
	}, 
	getRandomCat: () => {
		return new Promise((resolve, reject) => {
			request('https://api.thecatapi.com/v1/images/search', (err, res, body) => {
				if(err && !res.statusCode === 200) {
					reject(err);
				} else {
					const parsed = JSON.parse(body);
					resolve(parsed.url);
				}
			})
		})
	}
};
